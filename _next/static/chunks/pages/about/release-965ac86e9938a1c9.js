(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1509],{9993:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/about/release",function(){return s(8038)}])},8038:function(e,n,s){"use strict";s.r(n),s.d(n,{Version:function(){return l}});var r=s(1527),h=s(808),t=s(6736);s(8823);var i=s(959);function l(){let e=Object.assign({strong:"strong"},(0,t.ah)()),[n,s]=(0,i.useState)("加载中...");return(0,i.useEffect)(()=>{fetch("https://api.github.com/repos/mogland/core/releases/latest").then(e=>e.json()).then(e=>{s(e.tag_name)})},[]),(0,r.jsx)(e.strong,{children:n})}function d(e){let n=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",ul:"ul",li:"li",h3:"h3",strong:"strong",hr:"hr"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"版本发布",children:"版本发布"}),"\n","\n","\n",(0,r.jsxs)(n.p,{children:["当前 Mog 的最新稳定版本是 ",(0,r.jsx)(l,{}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["完整的过往发布记录可以在 ",(0,r.jsx)(n.a,{href:"https://github.com/mogland/core/releases",children:"GitHub"})," 查阅。"]}),"\n",(0,r.jsx)(n.h2,{id:"发布周期",children:"发布周期"}),"\n",(0,r.jsx)(n.p,{children:"Mog 并没有固定的发布周期。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"补丁版本 (patch releases) 发布会及时按需进行。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"小版本 (minor releases) 发布总是会包含一些新特性，发布周期并不确定，并会经历 beta 预发布阶段。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"大版本 (major releases) 发布会提前知会，且经历早期讨论和 alpha、beta 等预发布阶段。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"语义化版本控制的特殊情况",children:"语义化版本控制的特殊情况"}),"\n",(0,r.jsxs)(n.p,{children:["Mog 的发布会遵循",(0,r.jsx)(n.a,{href:"https://semver.org/",children:"语义化版本控制"}),"，同时伴随一些特殊情况。"]}),"\n",(0,r.jsx)(n.h3,{id:"编译后的代码和旧版运行时之间的兼容性",children:"编译后的代码和旧版运行时之间的兼容性"}),"\n",(0,r.jsxs)(n.p,{children:["较新",(0,r.jsx)(n.strong,{children:"小版本"}),"的 Mog 编译器可能会生成与较旧小版本的 Mog 运行时不兼容的代码。例如，由 Mog v2.1 生成的代码可能不完全兼容 Mog v.2.2 的运行时。"]}),"\n",(0,r.jsx)(n.h2,{id:"预发布版本",children:"预发布版本"}),"\n",(0,r.jsx)(n.p,{children:"小版本发布通常会经历不定量的 beta 版。而大版本发布则会经历 alpha 和 beta 阶段。"}),"\n",(0,r.jsx)(n.p,{children:"预发布版本 (pre releases) 是为了进行集成/稳定性测试，并让早期用户为不稳定的功能提供反馈。请不要在生产中使用预发布版本。所有的预发布版本都被认为是不稳定的，并且可能会在两者之间产生不兼容变更，所以在使用预发布版本时，一定要精确锁定版本号。"}),"\n",(0,r.jsx)(n.h2,{id:"废弃的特性",children:"废弃的特性"}),"\n",(0,r.jsx)(n.p,{children:"我们可能会定期废弃那些在新的小版本中拥有更新更好的替代品的功能。被废弃的功能仍将继续工作，但会在进入废弃状态后的下一个大版本中被删除。"}),"\n",(0,r.jsx)(n.h2,{id:"rfc",children:"RFC"}),"\n",(0,r.jsxs)(n.p,{children:["具有可观表层 API 的新特性和 Mog 的重大变更都将经历",(0,r.jsx)(n.strong,{children:"意见征集"})," (RFC) 流程。RFC 流程的目的是为新功能进入该框架提供一个一致且可控的路径，并给用户一个机会参与设计过程并提供反馈。"]}),"\n",(0,r.jsxs)(n.p,{children:["该 RFC 流程会在 GitHub 上的 ",(0,r.jsx)(n.a,{href:"https://github.com/mogland/rfcs",children:"mogland/rfcs"})," 仓库进行。"]}),"\n",(0,r.jsx)(n.h2,{id:"试验性特性",children:"试验性特性"}),"\n",(0,r.jsx)(n.p,{children:"有些特性在 Mog 的稳定版本中已经发布并被记录了，但被标记为试验性的。试验性特性通常与某些 RFC 讨论相关联，这些讨论中的大部分设计问题已经在理论上得到了解决，但仍缺乏来自真实实践的反馈。"}),"\n",(0,r.jsx)(n.p,{children:"试验性特性的目的是允许用户通过在生产环境中测试它们来提供反馈，而不必使用不稳定的 Mog 版本。试验性特性本身是被认为不稳定的，只能以某种受控的方式使用，且该特性可预期地会在任何发布类型中发生变化。"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["此页面参考自 Vue.js 的 ",(0,r.jsx)(n.a,{href:"https://cn.vuejs.org/about/releases.html",children:"版本发布"})," 页面。"]})]})}n.default=(0,h.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)},pageOpts:{filePath:"pages/about/release.mdx",route:"/about/release",headings:[{depth:1,value:"版本发布",id:"版本发布"},{depth:2,value:"发布周期",id:"发布周期"},{depth:2,value:"语义化版本控制的特殊情况",id:"语义化版本控制的特殊情况"},{depth:3,value:"编译后的代码和旧版运行时之间的兼容性",id:"编译后的代码和旧版运行时之间的兼容性"},{depth:2,value:"预发布版本",id:"预发布版本"},{depth:2,value:"废弃的特性",id:"废弃的特性"},{depth:2,value:"RFC",id:"rfc"},{depth:2,value:"试验性特性",id:"试验性特性"}],title:"版本发布"},pageNextRoute:"/about/release"})}},function(e){e.O(0,[808,9774,2888,179],function(){return e(e.s=9993)}),_N_E=e.O()}]);