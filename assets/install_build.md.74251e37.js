import{_ as e}from"./chunks/Badge.vue_vue_type_style_index_0_lang.2d40748a.js";import{_ as o,o as c,c as t,h as s,m as l,l as p,a as n}from"./app.c9583fbf.js";const b=JSON.parse('{"title":"自主构建 | 进阶安装","description":"","frontmatter":{"title":"自主构建 | 进阶安装"},"headers":[{"level":2,"title":"直接构建服务","slug":"直接构建服务","link":"#直接构建服务","children":[]},{"level":2,"title":"目前支持的服务","slug":"目前支持的服务","link":"#目前支持的服务","children":[]},{"level":2,"title":"拓展：使用 @vercel/ncc 重新打包","slug":"拓展-使用-vercel-ncc-重新打包","link":"#拓展-使用-vercel-ncc-重新打包","children":[]}],"relativePath":"install/build.md","lastUpdated":1675307129000}'),r={name:"install/build.md"},i=n(`<h1 id="自主构建" tabindex="-1">自主构建 <a class="header-anchor" href="#自主构建" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">你什么时候需要自主构建？</p><p>如果你想要自定义构建过程，或者你想要在不同的平台上运行，那么你需要自主构建。我们在「快速起步」章节提供的是 <strong>Linux + macOS x86</strong> 平台的构建包。</p></div><h2 id="直接构建服务" tabindex="-1">直接构建服务 <a class="header-anchor" href="#直接构建服务" aria-hidden="true">#</a></h2><p>克隆 git 仓库，其中 <code>core</code> 为 Mog 核心 必须安装</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">git</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">clone</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">https://github.com/mogland/core.git</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">git</span><span style="color:#393A34;"> </span><span style="color:#B56959;">clone</span><span style="color:#393A34;"> </span><span style="color:#B56959;">https://github.com/mogland/core.git</span></span>
<span class="line"></span></code></pre></div><p>使用 pnpm 安装项目依赖</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">install</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">install</span></span>
<span class="line"></span></code></pre></div><p>使用 NestJS CLI 命令构建你需要的服务</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">build:</span><span style="color:#CB7676;">&lt;</span><span style="color:#C98A7D;">service-nam</span><span style="color:#DBD7CAEE;">e</span><span style="color:#CB7676;">&gt;</span></span>
<span class="line"><span style="color:#758575DD;"># 比如说</span></span>
<span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">build:core</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">build:</span><span style="color:#AB5959;">&lt;</span><span style="color:#B56959;">service-nam</span><span style="color:#393A34;">e</span><span style="color:#AB5959;">&gt;</span></span>
<span class="line"><span style="color:#A0ADA0;"># 比如说</span></span>
<span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">build:core</span></span>
<span class="line"></span></code></pre></div><p>目前支持的 service-name 可在 <a href="#%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8C%81%E7%9A%84%E6%9C%8D%E5%8A%A1">目前支持的服务</a> 中看到</p><p>使用 <code>node</code> 命令启动你已构建完成的服务</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#B8A965;">cd</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">dist/</span><span style="color:#CB7676;">&lt;</span><span style="color:#C98A7D;">service-nam</span><span style="color:#DBD7CAEE;">e</span><span style="color:#CB7676;">&gt;</span></span>
<span class="line"><span style="color:#80A665;">node</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">main.js</span></span>
<span class="line"><span style="color:#758575DD;"># 比如说</span></span>
<span class="line"><span style="color:#B8A965;">cd</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">dist/core</span></span>
<span class="line"><span style="color:#80A665;">node</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">main.js</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#998418;">cd</span><span style="color:#393A34;"> </span><span style="color:#B56959;">dist/</span><span style="color:#AB5959;">&lt;</span><span style="color:#B56959;">service-nam</span><span style="color:#393A34;">e</span><span style="color:#AB5959;">&gt;</span></span>
<span class="line"><span style="color:#59873A;">node</span><span style="color:#393A34;"> </span><span style="color:#B56959;">main.js</span></span>
<span class="line"><span style="color:#A0ADA0;"># 比如说</span></span>
<span class="line"><span style="color:#998418;">cd</span><span style="color:#393A34;"> </span><span style="color:#B56959;">dist/core</span></span>
<span class="line"><span style="color:#59873A;">node</span><span style="color:#393A34;"> </span><span style="color:#B56959;">main.js</span></span>
<span class="line"></span></code></pre></div><h2 id="目前支持的服务" tabindex="-1">目前支持的服务 <a class="header-anchor" href="#目前支持的服务" aria-hidden="true">#</a></h2><p>目前支持的 <strong>service-name</strong> 有：</p>`,14),d=s("em",null,"core",-1),y=s("em",null,"user-service",-1),A=n("<li><em>page-service</em> - 文章页面分类服务模块</li><li><em>comments-service</em> - 评论服务模块</li><li><em>friends-service</em> - 友情链接服务模块</li><li><em>notification-service</em> - 通知服务模块</li><li><em>themes-service</em> - 主题服务模块</li>",5),D=n(`<h2 id="拓展-使用-vercel-ncc-重新打包" tabindex="-1">拓展：使用 @vercel/ncc 重新打包 <a class="header-anchor" href="#拓展-使用-vercel-ncc-重新打包" aria-hidden="true">#</a></h2><p><code>@vercel/ncc</code> 是一个可以将 Node.js 项目打包成一个单文件的工具，让你可以在不安装项目依赖（<code>node_modules</code>）的情况下运行项目。</p><p>core 中已经写好了相关构建命令，你可以直接使用，但前提是你需要先构建了服务。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">bundle:</span><span style="color:#CB7676;">&lt;</span><span style="color:#C98A7D;">service-nam</span><span style="color:#DBD7CAEE;">e</span><span style="color:#CB7676;">&gt;</span></span>
<span class="line"><span style="color:#758575DD;"># 比如说</span></span>
<span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">bundle:core</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 你也可以使用</span></span>
<span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">bundle</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;"># 构建所有服务</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">bundle:</span><span style="color:#AB5959;">&lt;</span><span style="color:#B56959;">service-nam</span><span style="color:#393A34;">e</span><span style="color:#AB5959;">&gt;</span></span>
<span class="line"><span style="color:#A0ADA0;"># 比如说</span></span>
<span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">bundle:core</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;"># 你也可以使用</span></span>
<span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">bundle</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;"># 构建所有服务</span></span>
<span class="line"></span></code></pre></div><p>构建完成后，你可以在 <code>out/&lt;service-name&gt;</code> 目录下找到打包后的文件夹。请注意，请勿修改打包后的文件夹内的任何文件，否则可能会导致服务无法正常运行。</p><p>接下来使用 <code>node</code> 命令启动你已构建完成的服务</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#B8A965;">cd</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">out/</span><span style="color:#CB7676;">&lt;</span><span style="color:#C98A7D;">service-nam</span><span style="color:#DBD7CAEE;">e</span><span style="color:#CB7676;">&gt;</span></span>
<span class="line"><span style="color:#80A665;">node</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">main.js</span></span>
<span class="line"><span style="color:#758575DD;"># 比如说</span></span>
<span class="line"><span style="color:#B8A965;">cd</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">out/core</span></span>
<span class="line"><span style="color:#80A665;">node</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">main.js</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#998418;">cd</span><span style="color:#393A34;"> </span><span style="color:#B56959;">out/</span><span style="color:#AB5959;">&lt;</span><span style="color:#B56959;">service-nam</span><span style="color:#393A34;">e</span><span style="color:#AB5959;">&gt;</span></span>
<span class="line"><span style="color:#59873A;">node</span><span style="color:#393A34;"> </span><span style="color:#B56959;">main.js</span></span>
<span class="line"><span style="color:#A0ADA0;"># 比如说</span></span>
<span class="line"><span style="color:#998418;">cd</span><span style="color:#393A34;"> </span><span style="color:#B56959;">out/core</span></span>
<span class="line"><span style="color:#59873A;">node</span><span style="color:#393A34;"> </span><span style="color:#B56959;">main.js</span></span>
<span class="line"></span></code></pre></div><p>关于组件启动时的自定义配置，请前往<a href="./../config/">「配置索引」</a>章节</p><div class="info custom-block"><p class="custom-block-title">关于持久化运行</p><p>请自行使用搜索引擎探索。这里给几个相关的关键词：<strong>pm2</strong>, <strong>screen</strong>, <strong>docker</strong>, <strong>docker compose</strong></p></div>`,9);function h(m,C,v,g,B,u){const a=e;return c(),t("div",null,[i,s("ul",null,[s("li",null,[d,l(" - 必要网关层 "),p(a,{text:"Required",color:"red",small:""})]),s("li",null,[y,l(" - 用户服务模块 "),p(a,{text:"Required",color:"red",small:""})]),A]),D])}const k=o(r,[["render",h]]);export{b as __pageData,k as default};
