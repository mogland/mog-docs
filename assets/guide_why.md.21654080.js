import{_ as e,o,c as t,a as r}from"./app.9f0c2498.js";const u=JSON.parse('{"title":"为什么选择 Mog？ | 指南","description":"","frontmatter":{"title":"为什么选择 Mog？ | 指南"},"headers":[{"level":2,"title":"Mog 是怎么样的？","slug":"mog-是怎么样的","link":"#mog-是怎么样的","children":[]},{"level":2,"title":"历史","slug":"历史","link":"#历史","children":[]}],"relativePath":"guide/why.md","lastUpdated":1675300833000}'),s={name:"guide/why.md"},a=r('<h1 id="为什么选择-mog" tabindex="-1">为什么选择 Mog？ <a class="header-anchor" href="#为什么选择-mog" aria-hidden="true">#</a></h1><h2 id="mog-是怎么样的" tabindex="-1">Mog 是怎么样的？ <a class="header-anchor" href="#mog-是怎么样的" aria-hidden="true">#</a></h2><p>Mog 默认推荐你使用的是<strong>前后端分离架构</strong>。这样可以给开发的人提供便捷，也避免了和其他领域的人做不太必要的争吵。<strong>专业的事情交给专业的人去做</strong>。</p><p>它具有高度的开发自由度，您可以通过<strong>接口</strong>来开发自己的前/中后台，也可以通过<strong>插件</strong>来开发自己的功能。</p><p>除此之外，多亏视图引擎，Mog 在 <code>v0.x</code> 引入了 <strong>「模板引擎」</strong> 功能，如优秀的 Hexo 等，使用 <strong>ejs</strong> 即可简单开发，局限性还是有的，毕竟是在后端处理，在变量提供方面我会尽量按照 Hexo 规范，但是并不能保证完全相同。</p><p>在 <code>v1</code> 版本中，使用了 Fastify 作为底层，这并不妨碍使用视图引擎，Fastify 可以自动解析视图引擎，而且它的视图引擎支持多种类型的视图，比如 ejs、pug、handlebars 等。但是相关的变量还正在讨论中，<strong>暂时未上线。</strong></p><p><code>v2</code> 版本中，我们颠覆从前的架构，选择了微服务架构，拓展了原有应用的功能。</p><p><strong>Mog 旨在探索一种新的博客系统架构，它的目标是提供一个高度自由度的博客系统，探索项目的最佳实践。</strong></p><p>继续阅读 <a href="/guide/">快速起步</a></p><h2 id="历史" tabindex="-1">历史 <a class="header-anchor" href="#历史" aria-hidden="true">#</a></h2><ul><li><code>v0.x</code>：MySQL + Express, 此为第一个版本，但是由于一些原因，我并没有继续开发下去。</li><li><code>v1.x</code>：MongoDB + Fastify, 此为第二个版本，但是由于其中的大部分代码以及结构与 Mix Space 极度相似，我打算走一条新的路线。</li><li><code>v2.x</code>：MongoDB + Fastify + <strong>Microservices</strong>, 此为第三个版本，我们将会在这个版本中，探索一种新的博客系统架构。</li></ul>',11),n=[a];function d(i,c,g,l,h,p){return o(),t("div",null,n)}const f=e(s,[["render",d]]);export{u as __pageData,f as default};
